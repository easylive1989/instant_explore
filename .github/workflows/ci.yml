name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  # 程式碼檢查和測試
  test:
    name: Test & Security Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.4'
        channel: 'stable'

    - name: Get dependencies
      run: flutter pub get

    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .

    - name: Analyze project source
      run: flutter analyze --fatal-infos

    - name: Security check - scan for hardcoded API keys
      run: |
        if grep -r "AIza[A-Za-z0-9_-]\{35\}" lib/; then
          echo "❌ 發現硬編碼的 Google API 金鑰！"
          exit 1
        else
          echo "✅ 無硬編碼 API 金鑰發現"
        fi

    - name: Run unit tests
      run: flutter test --coverage
      env:
        GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        GOOGLE_WEB_CLIENT_ID: ${{ secrets.GOOGLE_WEB_CLIENT_ID }}
        GOOGLE_IOS_CLIENT_ID: ${{ secrets.GOOGLE_IOS_CLIENT_ID }}

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: frontend/coverage/lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: easylive1989/instant_explore
        fail_ci_if_error: false

  # E2E 整合測試
  e2e-test:
    name: E2E Tests on iOS Simulator
    runs-on: macos-14
    needs: test
    defaults:
      run:
        working-directory: frontend
    
    steps:
        
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.4'
        channel: 'stable'


    - name: Get dependencies
      run: flutter pub get

    - name: Install Patrol CLI
      run: dart pub global activate patrol_cli

    - name: Start iOS Simulator
      uses: futureware-tech/simulator-action@v4
      with:
        model: 'iPhone 15'
        
    - name: Run E2E tests on iOS Simulator
      run: |
        export PATH="$PATH:$HOME/.pub-cache/bin"
        patrol test --target=integration_test/app_e2e_test.dart --verbose

  # Android 建置與部署
  build-android:
    name: Build & Deploy Android AAB
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    defaults:
      run:
        working-directory: frontend
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Install Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.4'
        channel: 'stable'

    - name: Get dependencies
      run: flutter pub get

    - name: Setup Android Release Signing
      run: |
        cd android
        # Create keystore from base64 encoded secret
        echo '${{ secrets.ANDROID_RELEASE_KEYSTORE }}' | base64 -d > release-keystore.jks
        
        # Create keystore.properties if it doesn't exist
        if [ ! -f keystore.properties ]; then
          echo "releaseStorePassword=${{ secrets.ANDROID_RELEASE_STORE_PASSWORD }}" >> keystore.properties
          echo "releaseKeyPassword=${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}" >> keystore.properties
          echo "releaseKeyAlias=${{ secrets.ANDROID_RELEASE_KEY_ALIAS }}" >> keystore.properties
          echo "releaseStoreFile=../release-keystore.jks" >> keystore.properties
        fi

    - name: Build Android App Bundle
      run: |
        flutter build appbundle --release \
          --dart-define=GOOGLE_MAPS_API_KEY=${{ secrets.GOOGLE_MAPS_API_KEY }} \
          --dart-define=SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
          --dart-define=SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }} \
          --dart-define=GOOGLE_WEB_CLIENT_ID=${{ secrets.GOOGLE_WEB_CLIENT_ID }} \
          --dart-define=GOOGLE_IOS_CLIENT_ID=${{ secrets.GOOGLE_IOS_CLIENT_ID }}
      env:
        RELEASESTOREPASSWORD: ${{ secrets.ANDROID_RELEASE_STORE_PASSWORD }}
        RELEASEKEYPASSWORD: ${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}
        RELEASEKEYALIAS: ${{ secrets.ANDROID_RELEASE_KEY_ALIAS }}
        RELEASESTOREFILE: ../release-keystore.jks

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        working-directory: frontend/android

    - name: Install Fastlane
      run: |
        cd android
        bundle install

    - name: Deploy to Google Play Console
      run: |
        cd android
        bundle exec fastlane deploy_internal
      env:
        GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}

  # iOS 建置與部署
  build-ios:
    name: Build & Deploy iOS IPA
    runs-on: macos-14
    needs: [test, e2e-test]
    defaults:
      run:
        working-directory: frontend
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.4'

    - name: Install Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.4'
        channel: 'stable'

    - name: Get dependencies
      run: flutter pub get

    - name: Install CocoaPods dependencies
      run: |
        cd ios
        gem install cocoapods
        pod install --repo-update

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        working-directory: frontend/ios

    - name: Install Fastlane
      run: |
        cd ios
        bundle install

    - name: Create App Store Connect API Key
      run: |
        cd ios
        mkdir -p ~/.appstoreconnect/private_keys/
        echo '${{ secrets.APP_STORE_CONNECT_API_PRIVATE_KEY }}' > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

    - name: Build and Deploy to TestFlight
      run: |
        cd ios
        bundle exec fastlane deploy_testflight_complete
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        GOOGLE_WEB_CLIENT_ID: ${{ secrets.GOOGLE_WEB_CLIENT_ID }}
        GOOGLE_IOS_CLIENT_ID: ${{ secrets.GOOGLE_IOS_CLIENT_ID }}


  # 建置狀態報告
  build-status:
    name: Build Status Report
    runs-on: ubuntu-latest
    needs: [test, e2e-test, build-android, build-ios]
    if: always()
    
    steps:
    - name: Report Status
      run: |
        echo "## 🚀 建置狀態報告"
        echo "- 單元測試: ${{ needs.test.result }}"
        echo "- E2E 測試: ${{ needs.e2e-test.result }}"
        echo "- Android 建置: ${{ needs.build-android.result }}"  
        echo "- iOS 建置: ${{ needs.build-ios.result }}"
        
        if [ "${{ needs.test.result }}" = "success" ] && \
           [ "${{ needs.e2e-test.result }}" = "success" ] && \
           [ "${{ needs.build-android.result }}" = "success" ] && \
           [ "${{ needs.build-ios.result }}" = "success" ]; then
          echo "✅ 所有測試和建置成功完成！"
        else
          echo "❌ 部分測試或建置失敗，請檢查日誌"
          exit 1
        fi